import datetime
from typing import Dict

from dagster import (
    asset,
    AssetExecutionContext,
    MaterializeResult,
    MetadataValue,
    ResourceParam,
)
import pandas as pd

from rives import Rives, Notice

from .leaderboard import (
    compute_leaderboard,
    leaderboard_frontend_data
)
from .resources import PublicBucket


@asset(group_name='leaderboard')
def tournament_contests() -> list[Dict[str, str]]:
    # TODO: Retrieve fom configuration file (in GCS as well?)
    return [
        {
            'contest_id': 'daee50b09c08daee50b09c082d9fb5c34017765d',
            'name': 'Battier',
        },
        {
            'contest_id': '7654435bf0677654435bf06780bf0867f86e8308',
            'name': 'Slither Slide',
        },
        {
            'contest_id': '9c02cdf2651371c1a099c69399abea549f9829c5',
            'name': 'Rush Hour'
        },
        {
            'contest_id': '3b9bcf0b44f63b9bcf0b44f6c89067fe48394127',
            'name': 'Slopeng',
        },
        {
            'contest_id': 'bba40250eaebbba40250eaeb73dbd9a5e23f698e',
            'name': 'Pakboy',
        },
        {
            'contest_id': '8ac94c79ac698ac94c79ac69ce3890ec8410d499',
            'name': 'The Rhythm Spell Caster',
        },
        {
            'contest_id': '8354300547af8354300547afcc55a29edd730116',
            'name': 'Space Warrior',
        },
        {
            'contest_id': 'a612d46cd43fa612d46cd43f27d696da8ea75e9f',
            'name': 'Slalom',
        },
        {
            'contest_id': '9c87f0c83eef9c87f0c83eef7e9fc3c1b588bcdb',
            'name': 'Frost Slide',
        },
    ]


@asset(group_name='leaderboard')
def tournament_notices(
    context: AssetExecutionContext,
    tournament_contests: list[Dict[str, str]],
    rives: ResourceParam[Rives],
) -> list[Notice]:
    """
    A list of notices generated by the validataion of tapes.
    """
    contest_ids = [x['contest_id'] for x in tournament_contests]
    notices = rives.get_contests_scores(contest_ids, n_records=1000)

    context.add_output_metadata(
        metadata={
            "n_contests": len(tournament_contests),
            "n_notices": len(notices),
        }
    )

    return notices


@asset(group_name='leaderboard')
def tournament_leaderboard(
    context: AssetExecutionContext,
    tournament_contests: list[Dict[str, str]],
    tournament_notices: list[Notice],
) -> pd.DataFrame:

    contest_ids = [x['contest_id'] for x in tournament_contests]

    leaderboard = compute_leaderboard(
        notices=tournament_notices,
        contest_ids=contest_ids,
    )

    context.add_output_metadata(
        metadata={
            'leaderboard': MetadataValue.md(leaderboard.to_markdown()),
        }
    )

    return leaderboard


@asset(group_name='leaderboard')
def tournament_leaderboard_file(
    context: AssetExecutionContext,
    tournament_leaderboard: pd.DataFrame,
    tournament_contests: list[Dict[str, str]],
    public_bucket: PublicBucket,
):

    data = leaderboard_frontend_data(
        df_leaderboard=tournament_leaderboard,
        contests=tournament_contests,
    )

    data['run'] = {
        'executed': (
            datetime.datetime.now(tz=datetime.timezone.utc).isoformat(),
        ),
        'run_id': context.run.run_id,
    }

    output_file = public_bucket.write_tournament_leaderboard(
        data,
        'doom-olympics'
    )

    context.log.info('Wrote leaderboard to %s', output_file)

    return MaterializeResult(
        metadata={
            'dagster/uri': output_file
        }
    )
